<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.itlike.mapper.EmployeeMapper" >
  <resultMap id="BaseResultMap" type="com.itlike.domain.Employee" >
    <id column="id" property="id" jdbcType="BIGINT" />
    <result column="username" property="username" jdbcType="VARCHAR" />
    <result column="inputtime" property="inputtime" jdbcType="TIMESTAMP" />
    <result column="tel" property="tel" jdbcType="VARCHAR" />
    <result column="email" property="email" jdbcType="VARCHAR" />
    <result column="state" property="state" jdbcType="BIT" />
    <result column="admin" property="admin" jdbcType="BIT" />
<!--    <result column="dep_id" property="depId" jdbcType="BIGINT" />-->
    <result column="password" property="password" jdbcType="VARCHAR" />
    <association property="department" javaType="com.itlike.domain.Department" columnPrefix="d_">
      <result property="id" column="id"/>
      <result property="name" column="name"/>
    </association>
  </resultMap>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long" >
    delete from employee
    where id = #{id,jdbcType=BIGINT}
  </delete>
<!--    删除员工 角色 关系表-->
    <delete id="deleteEmpAndRoleRel">
        delete from employee_role_rel where eid=#{id}
    </delete>
    <!--    保存员工-->
  <insert id="insert" parameterType="com.itlike.domain.Employee" useGeneratedKeys="true" keyProperty="id">
       insert into employee (
    id,
    username,
    password,
    inputtime,
    tel,
    email,
    state,
    admin,
    dep_id)
    values (#{id}, #{username},#{password}, #{inputtime},
      #{tel}, #{email}, #{state}, #{admin},
      #{department.id})
  </insert>
<!--    保存员工角色关系-->
    <insert id="insertEmpAndRole" >
        insert into employee_role_rel(eid,rid)
        values(#{id},#{rid})
    </insert>
    <update id="updateByPrimaryKey" parameterType="com.itlike.domain.Employee" >
    update employee
    set username = #{username},
      inputtime = #{inputtime},
      tel = #{tel},
      email = #{email},
      admin = #{admin},
      dep_id = #{department.id}
    where id = #{id}
  </update>
<!--    修改状态-->
    <update id="updateState">
        update employee set state =false where id=#{id}
    </update>
    <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Long" >
    select id, username, inputtime, tel, email, state, admin, dep_id, password
    from employee
    where id = #{id,jdbcType=BIGINT}
  </select>
    <sql id="where_sql">
        <where>
            <if test=" keyword !=null and keyword !='' ">
                and tel like concat('%',#{keyword},'%')
                or username like concat('%',#{keyword},'%')
            </if>
        </where>
    </sql>
  <select id="selectAll" resultMap="BaseResultMap" >
        select e.id,
        username,
        inputtime,
        tel,
        email,
        state,
        admin,
        password,
        d.id as d_id,
        d.`name` as d_name
        from employee as e
        left join department as d
        on e.dep_id=d.id
        <include refid="where_sql"></include>
  </select>
<!--    查询角色 通过eid-->
    <select id="getRidByEid" resultType="java.lang.Long">
        select rid from employee_role_rel where eid=#{id}
    </select>
<!--    根据用户名查询用户-->
    <select id="getEmployeeWithUsername" resultType="com.itlike.domain.Employee">
        select * from employee where username=#{username}
    </select>
<!--    根据角色 id查询-->
    <select id="getRolesRoleId" resultType="java.lang.String">
        SELECT r.rnum FROM `employee_role_rel` as e
        Left join role as r on e.rid=r.rid where eid=#{id}
    </select>
<!--    根据 用户id查询 资源名称
    1.查询所有角色和权限
    2.查询用户给有哪些角色
    -->
    <select id="getPermissionById" resultType="java.lang.String">
    SELECT DISTINCT p.presource FROM `per_role_for` as r
    left join permission as p
    on r.pid=p.pid where rid in(select rid from employee_role_rel where eid=#{id})
    </select>
</mapper>